<launch>
    <arg name="robot_id"/>
    <arg name="config_dir"/>
    <arg name="dsg_output_dir"/>
    <arg name="dsg_output_prefix"/>
    <arg name="typology_dir"/>
    <arg name="typology_config"/>
    <arg name="semantic_map_dir"/>
    <arg name="semantic_map_file"/>
    <arg name="sensor_frame"/>
    <arg name="world_frame" default="world"/>

    <arg name="use_gt_frame" default="true"/>
    <arg name="use_oriented_bounding_boxes" default="false"/>
    <arg name="exit_mode" default="NORMAL"/>
    <arg name="start_visualizer" default="true"/>
    <arg name="start_logger" default="true"/>
    <arg name="use_zmq_interface" default="false"/>
    <arg name="zmq_send_url" default="tcp://127.0.0.1:8001"/>
    <arg name="zmq_recv_url" default="tcp://127.0.0.1:8002"/>

    <arg name="semantic_map_path" default="$(arg semantic_map_dir)/$(arg semantic_map_file)"/>
    <arg name="typology_path" default="$(arg typology_dir)/$(arg typology_config)"/>

    <arg name="optimize_on_lc" default="true"/>
    <arg name="enable_merge_undos" default="false"/>
    <arg name="visualize_reconstruction" default="false"/>
    <arg name="lcd_use_bow_vectors" default="true"/>
    <arg name="enable_dsg_lcd" default="false"/>
    <arg name="use_gnn_descriptors" default="false"/>
    <arg name="lcd_gnn_object_model" default="$(find hydra_dsg_builder)/models/lcd/objects_gnn.onnx"/>
    <arg name="lcd_gnn_places_model" default="$(find hydra_dsg_builder)/models/lcd/places_gnn.onnx"/>
    <arg name="lcd_gnn_label_embeddings" if="$(arg use_gnn_descriptors)"/>

    <arg name="visualize_reconstruction" default="true"/>
    <arg name="enable_lcd_viz" default="false"/>

    <arg name="dsg_should_log" default="true" />
    <arg name="pgmo_should_log" default="true"/>
    <arg name="log_registration" default="false"/>

    <arg name="do_reconstruction" default="true"/>
    <arg name="reconstruction_config" if="$(arg do_reconstruction)"/>
    <arg name="extrinsics" if="$(arg do_reconstruction)"/>
    <arg name="pointcloud_topic" if="$(arg do_reconstruction)"/>
    <arg name="use_ros_backend" default="false"/>
    <arg name="validate_vertices" default="false"/>

    <arg name="graph_viz_config_dir" default="$(find hydra_topology)/config"/>
    <arg name="graph_viz_config" default="graph_visualization_config.yaml"/>
    <arg name="graph_viz_config_file" value="$(arg graph_viz_config_dir)/$(arg graph_viz_config)"/>

    <arg name="debug" default="false"/>
    <arg name="launch_prefix" value="gdb -ex run --args" if="$(arg debug)"/>
    <arg name="launch_prefix" value="" unless="$(arg debug)"/>

    <arg name="min_glog_level" default="0"/>
    <arg name="verbosity" default="0"/>
    <arg name="glog_to_file" default="false"/>
    <arg name="glog_dir" default="$(find hydra_dsg_builder)/glogs"/>
    <arg name="glog_file_args" value="--logtostderr=0 --log_dir=$(arg glog_dir)" if="$(arg glog_to_file)"/>
    <arg name="glog_file_args" value="" unless="$(arg glog_to_file)"/>

    <arg name="log_timing_incrementally" default="false"/>
    <arg name="show_topology_stats" default="false"/>
    <arg name="dsg_path" default="$(arg dsg_output_dir)/$(arg dsg_output_prefix)"/>
    <arg name="pgmo_log_path" value="$(arg dsg_path)/pgmo"/>
    <arg name="ros_output" value="screen" unless="$(arg glog_to_file)"/>
    <arg name="ros_output" value="log" if="$(arg glog_to_file)"/>

    <node pkg="hydra_dsg_builder_ros" type="hydra_dsg_builder_ros_node"
          name="incremental_dsg_builder_node"
          launch-prefix="$(arg launch_prefix)"
          args="--minloglevel=$(arg min_glog_level) -v=$(arg verbosity) $(arg glog_file_args)"
          required="true"
          output="$(arg ros_output)">
        <env name="OMP_NUM_THREADS" value="12"/>
        <env name="TERM" value="xterm-256color"/>

        <rosparam file="$(arg typology_path)"/>
        <rosparam file="$(arg config_dir)/dsg_frontend_config.yaml"/>
        <rosparam file="$(arg config_dir)/dsg_backend_config.yaml"/>
        <rosparam file="$(arg config_dir)/dsg_lcd_config.yaml"/>
        <rosparam file="$(arg reconstruction_config)" if="$(arg do_reconstruction)"/>
        <rosparam file="$(arg extrinsics)" if="$(arg do_reconstruction)"/>

        <param name="topology_visualizer_ns" value="~/topology_visualizer"/>
        <param name="visualize_reconstruction" value="$(arg visualize_reconstruction)"/>
        <param name="publish_reconstruction_mesh" value="$(arg visualize_reconstruction)"/>
        <rosparam file="$(arg graph_viz_config_file)" ns="topology_visualizer"/>

        <param name="use_pose_graph" value="$(eval not arg('use_gt_frame'))"/>
        <param name="do_reconstruction" value="$(arg do_reconstruction)"/>
        <param name="min_mesh_separation_s" value="0.5"/>
        <param name="enable_reconstruction_output_queue" value="true"/>
        <param name="use_ros_backend" value="$(arg use_ros_backend)"/>
        <param name="dsg/use_mesh_subscribers" value="$(arg use_ros_backend)"/>
        <param name="exit_mode" value="$(arg exit_mode)"/>
        <param name="should_log" value="$(arg dsg_should_log)"/>
        <param name="log_path" value="$(arg dsg_path)"/>
        <param name="log_timing_incrementally" value="$(arg log_timing_incrementally)"/>
        <param name="disable_timer_output" value="true"/>
        <param name="timing_disabled" value="false"/>
        <param name="visualize_dsg_lcd" value="$(arg enable_lcd_viz)"/>
        <param name="semantic_label_file" value="$(arg semantic_map_path)"/>
        <param name="robot_id" value="$(arg robot_id)"/>
        <param name="world_frame" value="$(arg world_frame)"/>
        <param name="robot_frame" value="$(arg sensor_frame)"/>
        <param name="show_stats" value="$(arg show_topology_stats)"/>
        <param name="validate_vertices" value="$(arg validate_vertices)"/>

        <param name="dsg/use_zmq_interface" value="$(arg use_zmq_interface)"/>
        <param name="dsg/zmq_send_url" value="$(arg zmq_send_url)"/>
        <param name="dsg/zmq_recv_url" value="$(arg zmq_recv_url)"/>
        <param name="dsg/zmq_num_threads" value="2"/>
        <param name="dsg/zmq_poll_time_ms" value="10"/>
        <param name="pgmo/log_path" value="$(arg pgmo_log_path)"/>
        <param name="pgmo/should_log" value="$(arg pgmo_should_log)"/>
        <param name="objects/bounding_box_type" value="RAABB" if="$(arg use_oriented_bounding_boxes)"/>
        <param name="objects/bounding_box_type" value="AABB" unless="$(arg use_oriented_bounding_boxes)"/>
        <param name="pgmo/robot_id" value="$(arg robot_id)"/>

        <param name="enable_lcd" value="$(arg enable_dsg_lcd)"/>
        <param name="lcd_use_bow_vectors" value="$(arg lcd_use_bow_vectors)"/>
        <param name="dsg/optimize_on_lc" value="$(arg optimize_on_lc)"/>
        <param name="dsg/enable_merge_undos" value="$(arg enable_merge_undos)"/>
        <param name="lcd/log_registration_problem" value="$(arg log_registration)"/>
        <param name="lcd/use_gnn_descriptors" value="$(arg use_gnn_descriptors)"/>
        <param name="lcd/gnn_lcd/object_model_path" value="$(arg lcd_gnn_object_model)"/>
        <param name="lcd/gnn_lcd/places_model_path" value="$(arg lcd_gnn_places_model)"/>
        <param name="lcd/gnn_lcd/label_embeddings_file" value="$(arg lcd_gnn_label_embeddings)"
               if="$(arg use_gnn_descriptors)"/>

        <remap from="~pose_graph" to="kimera_vio_ros/pose_graph_incremental"
               unless="$(arg use_gt_frame)"/>
        <remap from="~/bow_vectors" to="kimera_vio_ros/bow_query"/>
        <remap from="frame_registration" to="kimera_vio_ros/kimera_vio_ros_node/register_lcd_frames"/>
        <remap from="~pointcloud" to="$(arg pointcloud_topic)" if="$(arg do_reconstruction)"/>
    </node>

    <group if="$(arg start_visualizer)">
        <include file="$(find hydra_utils)/launch/hydra_streaming_visualizer.launch" pass_all_args="true"/>

        <include file="$(find pose_graph_tools)/launch/posegraph_view.launch">
            <arg name="frame_id"      value="$(arg world_frame)" />
            <arg name="graph_topic"   value="pose_graph" />
            <arg name="ns"            value="incremental_dsg_builder_node/pgmo"/>
        </include>
    </group>

    <include if="$(arg start_logger)" file="$(find hydra_utils)/launch/scene_graph_logger.launch" pass_all_args="true">
        <arg name="output_path" value="$(arg dsg_path)"/>
    </include>

</launch>
