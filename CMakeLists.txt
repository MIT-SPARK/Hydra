cmake_minimum_required(VERSION 3.14)
project(hydra VERSION 2.0.0)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

add_compile_options(-Wall -Wextra)

option(HYDRA_ENABLE_COVERAGE "Build core library with GCC --coverage option" OFF)
option(HYDRA_ENABLE_EVAL "Build evaluation code" ON)
option(HYDRA_ENABLE_GNN "Build GNN interface" OFF)
option(HYDRA_ENABLE_PYTHON "Build Hydra python bindings" OFF)
option(HYDRA_ENABLE_TESTS "Build Hydra unit tests" OFF)
option(HYDRA_DOWNLOAD_VOCAB "Download DBoW2 Vocabulary" ON)
option(HYDRA_ENABLE_ROS_INSTALL_LAYOUT "Install binaries to ROS location" ON)
option(BUILD_SHARED_LIBS "Build shared libs" ON)

find_package(config_utilities REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(GTSAM REQUIRED)
find_package(OpenCV REQUIRED COMPONENTS core imgproc imgcodecs)
find_package(spark_dsg REQUIRED)
find_package(teaserpp REQUIRED)
find_package(kimera_pgmo REQUIRED)
find_package(voxblox REQUIRED)

# we turn off PCL precompile internally to get around having vtk linked. Note: kdtree is
# REQUIRED to make sure we link against FLANN (used by euclidean extraction)
find_package(PCL REQUIRED COMPONENTS common kdtree)
# TODO(nathan) push to pose_graph_tools
find_package(tf2_eigen REQUIRED)

include(GNUInstallDirs)
include(HydraBuildConfig)
include(HydraSourceDependencies)

add_library(${PROJECT_NAME})
target_include_directories(
  ${PROJECT_NAME}
  PUBLIC $<INSTALL_INTERFACE:include>
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
         ${OpenCV_INCLUDE_DIRS}
         ${kimera_pgmo_INCLUDE_DIRS}
         ${voxblox_INCLUDE_DIRS}
  PRIVATE ${CMAKE_CURRENT_BINARY_DIR} ${tf2_eigen_INCLUE_DIRS} ${PCL_INCLUDE_DIRS}
)
target_link_libraries(
  ${PROJECT_NAME}
  PUBLIC config_utilities::config_utilities
         Eigen3::Eigen
         gtsam
         spark_dsg::spark_dsg
         teaserpp::teaser_registration
         ${kimera_pgmo_LIBRARIES}
         ${OpenCV_LIBRARIES}
         ${voxblox_LIBRARIES}
  PRIVATE DBoW2::DBoW2 nanoflann::nanoflann ${tf2_eigen_LIBRARIES} ${PCL_LIBRARIES}
)
set_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE ON)
add_library(hydra::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

add_subdirectory(src)
if(HYDRA_ENABLE_GNN)
  add_subdirectory(src/gnn)
  target_link_libraries(${PROJECT_NAME} PRIVATE ort::ort)
endif()

if(HYDRA_ENABLE_COVERAGE)
  target_compile_options(${PROJECT_NAME} PRIVATE --coverage)
  target_link_options(${PROJECT_NAME} PRIVATE --coverage)
endif()

if(HYDRA_ENABLE_EVAL)
  add_subdirectory(eval)
endif()

if(HYDRA_ENABLE_PYTHON)
  add_subdirectory(python)
endif()

if(HYDRA_ENABLE_TESTS)
  enable_testing()
  add_subdirectory(tests)
endif()

if(HYDRA_DOWNLOAD_VOCAB)
  #TODO(nathan) come up with better solution
  set(VOCAB_DIR "${CMAKE_CURRENT_SOURCE_DIR}/models/vocabulary")
  if(NOT EXISTS ${VOCAB_DIR}/ORBVoc.yml)
    file(DOWNLOAD http://www.dropbox.com/s/lyo0qgbdxn6eg6o/ORBvoc.zip?dl=1
         ${VOCAB_DIR}/ORBvoc.zip SHOW_PROGRESS STATUS download_okay TIMEOUT 60
    )
    if(download_okay)
      execute_process(
        COMMAND ${CMAKE_COMMAND} -E tar xzf ${VOCAB_DIR}/ORBvoc.zip
        WORKING_DIRECTORY ${VOCAB_DIR}
      )
      execute_process(
        COMMAND ${CMAKE_COMMAND} -E copy_directory ${VOCAB_DIR}/ORBvoc ${VOCAB_DIR}
      )
      execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory ${VOCAB_DIR}/ORBvoc)
    else()
      message(STATUS "Failed to download vocabulary file. Please download manually.")
    endif()
  endif()
endif()

include(HydraInstall)
