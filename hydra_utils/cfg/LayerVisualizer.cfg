#!/usr/bin/env python
"""Visualization config for static layers in the scene graph."""
PACKAGE = "hydra_utils"

import dynamic_reconfigure.parameter_generator_catkin as dr_gen  # NOQA

gen = dr_gen.ParameterGenerator()

gen.add(
    "z_offset_scale",
    dr_gen.double_t,
    0,
    "number of steps of offset to apply",
    0.0,
    -5.0,
    10.0,
)
gen.add("visualize", dr_gen.bool_t, 0, "show layer", False)

# Nodes
nodes = gen.add_group("nodes", type="tab")
nodes.add(
    "marker_scale", dr_gen.double_t, 0, "size of the centroid marker", 0.1, 0.01, 2.0
)
nodes.add(
    "marker_alpha", dr_gen.double_t, 0, "alpha of the centroid marker", 1.0, 0.0, 1.0
)
nodes.add(
    "use_sphere_marker",
    dr_gen.bool_t,
    0,
    "use sphere markers (instead of cubes)",
    False,
)
nodes.add("use_label", dr_gen.bool_t, 0, "add text label", False)
nodes.add(
    "label_height", dr_gen.double_t, 0, "height of text label above node", 1.0, 0.0, 5.0
)
nodes.add(
    "label_scale", dr_gen.double_t, 0, "scale of text label above node", 0.5, 0.05, 5.0
)
nodes.add(
    "use_bounding_box",
    dr_gen.bool_t,
    0,
    "display bounding box",
    False,
)
nodes.add(
    "collapse_bounding_box",
    dr_gen.bool_t,
    0,
    "draw bounding box at ground level",
    False,
)
nodes.add(
    "bbox_wireframe_scale",
    dr_gen.double_t,
    0,
    "scale of bounding box wireframe",
    0.1,
    0.001,
    1.0,
)
nodes.add(
    "bbox_wireframe_edge_scale",
    dr_gen.double_t,
    0,
    "scale of edges drawn to bbox corners",
    0.01,
    0.001,
    1.0,
)
nodes.add(
    "bounding_box_alpha", dr_gen.double_t, 0, "alpha of bounding boxes", 0.5, 0.0, 1.0
)

# Edges
edges = gen.add_group("edges", type="tab")
edges.add("use_edge_source", dr_gen.bool_t, 0, "use edge source layer for config", True)

edges.add(
    "interlayer_edge_scale",
    dr_gen.double_t,
    0,
    "interlayer edge size",
    0.03,
    0.001,
    1.0,
)
edges.add(
    "interlayer_edge_alpha", dr_gen.double_t, 0, "interlayer edge alpha", 1.0, 0.0, 1.0
)
edges.add(
    "interlayer_edge_use_color", dr_gen.bool_t, 0, "show interlayer edge in color", True
)
edges.add(
    "interlayer_edge_insertion_skip",
    dr_gen.int_t,
    0,
    "Number of edges to skip when drawing interlayer edges",
    0,
    0,
    1000,
)

edges.add(
    "intralayer_edge_scale",
    dr_gen.double_t,
    0,
    "intralayer edge size",
    0.03,
    0.001,
    1.0,
)
edges.add(
    "intralayer_edge_alpha", dr_gen.double_t, 0, "intralayer edge alpha", 1.0, 0.0, 1.0
)
edges.add(
    "intralayer_edge_use_color", dr_gen.bool_t, 0, "show intralayer edge in color", True
)
edges.add(
    "intralayer_edge_insertion_skip",
    dr_gen.int_t,
    0,
    "Number of edges to skip when drawing intralayer edges",
    0,
    0,
    1000,
)

exit(gen.generate(PACKAGE, PACKAGE, "LayerVisualizer"))
