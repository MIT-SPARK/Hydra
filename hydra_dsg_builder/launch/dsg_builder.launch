<launch>
    <arg name="robot_id"/>
    <arg name="config_dir"/>
    <arg name="dsg_output_dir"/>
    <arg name="dsg_output_prefix"/>
    <arg name="typology_dir"/>
    <arg name="typology_config"/>
    <arg name="semantic_map_dir"/>
    <arg name="semantic_map_file"/>
    <arg name="semantic_map_path"/>
    <arg name="sensor_frame"/>
    <arg name="world_frame" default="world"/>

    <arg name="use_gt_frame" default="true"/>
    <arg name="use_oriented_bounding_boxes" default="false"/>
    <arg name="exit_mode" default="NORMAL"/>
    <arg name="start_visualizer" default="false"/>

    <arg name="enable_dsg_lcd" default="false"/>
    <arg name="enable_lcd_viz" default="false"/>
    <arg name="optimize_on_lc" default="true"/>
    <arg name="enable_merge_undos" default="false"/>

    <arg name="dsg_should_log" default="true" />
    <arg name="pgmo_should_log" default="true"/>
    <arg name="log_registration" default="false"/>

    <arg name="debug" default="false"/>
    <arg name="launch_prefix" value="gdb -ex run --args" if="$(arg debug)"/>
    <arg name="launch_prefix" value="" unless="$(arg debug)"/>

    <arg name="min_glog_level" default="3"/>
    <arg name="verbosity" default="0"/>
    <arg name="glog_to_file" default="false"/>
    <arg name="glog_dir" default="$(find hydra_dsg_builder)/glogs"/>
    <arg name="glog_file_args" value="--logtostderr=0 --log_dir=$(arg glog_dir)" if="$(arg glog_to_file)"/>
    <arg name="glog_file_args" value="" unless="$(arg glog_to_file)"/>

    <arg name="log_timing_incrementally" default="false"/>
    <arg name="dsg_path" default="$(arg dsg_output_dir)/$(arg dsg_output_prefix)"/>
    <arg name="pgmo_log_path" value="$(arg dsg_path)/pgmo"/>
    <arg name="ros_output" value="screen" unless="$(arg glog_to_file)"/>
    <arg name="ros_output" value="log" if="$(arg glog_to_file)"/>

    <arg name="lcd_viz_path" default="$(find hydra_dsg_builder)/config/lcd_visualizer"/>
    <group ns="/dsg_lcd_visualizer" if="$(arg enable_lcd_viz)">
        <rosparam file="$(arg lcd_viz_path)/visualizer.yaml" ns="config"/>
        <rosparam file="$(arg lcd_viz_path)/objects_layer.yaml" ns="config/layer2"/>
        <rosparam file="$(arg lcd_viz_path)/places_layer.yaml" ns="config/layer3"/>
        <rosparam file="$(arg lcd_viz_path)/agent_layer.yaml" ns="config/agent_layer"/>
    </group>

    <include if="$(arg start_visualizer)" file="$(find hydra_utils)/launch/hydra_streaming_visualizer.launch" pass_all_args="true">
    </include>

    <node pkg="hydra_dsg_builder" type="hydra_dsg_builder_incremental_node"
          name="incremental_dsg_builder_node"
          launch-prefix="$(arg launch_prefix)"
          args="--minloglevel=$(arg min_glog_level) -v=$(arg verbosity) $(arg glog_file_args)"
          required="true"
          output="$(arg ros_output)">
        <env name="OMP_NUM_THREADS" value="12"/>
        <env name="TERM" value="xterm-256color"/>

        <rosparam file="$(arg typology_dir)/$(arg typology_config)"/>
        <rosparam file="$(arg config_dir)/dsg_frontend_config.yaml"/>
        <rosparam file="$(arg config_dir)/dsg_backend_config.yaml"/>
        <rosparam file="$(arg config_dir)/dsg_lcd_config.yaml"/>

        <param name="enable_lcd" value="$(arg enable_dsg_lcd)"/>
        <param name="exit_mode" value="$(arg exit_mode)"/>
        <param name="should_log" value="$(arg dsg_should_log)"/>
        <param name="log_path" value="$(arg dsg_path)"/>
        <param name="log_timing_incrementally" value="$(arg log_timing_incrementally)"/>
        <param name="disable_timer_output" value="true"/>
        <param name="visualize_dsg_lcd" value="$(arg enable_lcd_viz)"/>
        <param name="semantic_label_file" value="$(arg semantic_map_path)"/>
        <param name="robot_id" value="$(arg robot_id)"/>
        <param name="sensor_frame" value="$(arg sensor_frame)"/>
        <param name="world_frame" value="$(arg world_frame)"/>

        <param name="dsg/optimize_on_lc" value="$(arg optimize_on_lc)"/>
        <param name="dsg/enable_merge_undos" value="$(arg enable_merge_undos)"/>
        <param name="lcd/log_registration_problem" value="$(arg log_registration)"/>
        <param name="pgmo/log_path" value="$(arg pgmo_log_path)"/>
        <param name="pgmo/should_log" value="$(arg pgmo_should_log)"/>
        <param name="objects/bounding_box_type" value="RAABB" if="$(arg use_oriented_bounding_boxes)"/>
        <param name="objects/bounding_box_type" value="AABB" unless="$(arg use_oriented_bounding_boxes)"/>
        <param name="pgmo/robot_id" value="$(arg robot_id)"/>

        <remap from="~voxblox_mesh" to="hydra_topology_node/active_mesh"/>
        <remap from="~active_places" to="hydra_topology_node/active_layer"/>
        <remap from="~pose_graph_incremental" to="kimera_vio_ros/pose_graph_incremental"
               unless="$(arg use_gt_frame)"/>
        <remap from="~/bow_vectors" to="kimera_vio_ros/bow_query"/>
        <remap from="frame_registration" to="kimera_vio_ros/kimera_vio_ros_node/register_lcd_frames"/>
    </node>

    <node pkg="hydra_utils" type="pose_graph_publisher_node"
          if="$(arg use_gt_frame)"
          name="pose_graph_publisher_node"
          required="true"
          output="log">
          <param name="use_pointcloud_time" value="true"/>
          <param name="keyframe_period_s" value="0.2"/>
          <param name="world_frame" value="$(arg world_frame)"/>
          <param name="robot_frame" value="$(arg sensor_frame)"/>
          <param name="robot_id" value="$(arg robot_id)"/>
          <remap from="~pose_graph" to="/incremental_dsg_builder_node/pose_graph_incremental"/>
          <remap from="~time_point" to="/pointcloud_time"/>
    </node>

    <include file="$(find pose_graph_tools)/launch/posegraph_view.launch">
        <arg name="frame_id"      value="$(arg world_frame)" />
        <arg name="graph_topic"   value="pose_graph" />
        <arg name="ns"            value="incremental_dsg_builder_node/pgmo"/>
    </include>

</launch>
